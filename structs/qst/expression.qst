use std::ascii::{
  Integer,
  Point,
  SkipWhiteSpace,
}

use crate::identifier::{
  Identifier,
  ModuleId,
}

pub enum Expression (..) {
  InExpression (in InExpression),
  IdentifierOrConstant (in IdentifierOrConstant),
}

enum IdentifierOrConstant (..) {
  IdentifierOrIdExpression (in IdentifierOrIdExpression),
  Constant (in Constant),
}

enum IdentifierOrIdExpression (..) {
  IdentifierAndOperator (in IdentifierAndOperator),
  Identifier (in Identifier),
}

struct IdentifierAndOperator {
  Identifier (in Identifier),
  Operator (in Operator),
  IdentifierOrConstant (in IdentifierOrConstant),
}

enum Constant (..) {
  RangedValue (in RangedValue),
  Integer (in Integer),
}

struct RangedValue {
  IntgerOrArbitraryRange (in IntegerOrArbitraryRange),
}

enum IntgerOrArbitraryRange {
  IntegerAndRange (in IntegerAndRange),
  Range (in Range),
}

struct IntegerAndRange {
  Intger (in Intger)
  RangeOrRangeAndInteger (in RangeOrRangeAndInteger),
}

enum RangeOrRangeAndInteger {
  RangeAndInteger (in RangeAndInteger),
  Range (in Range),
}

struct RangeAndInteger {
  Range (in Range),
  Integer (in Integer),
}

struct Range {
  FirstPoint (in Point),
  SecondPoint (in Point),
}

struct Range {
  FirstPoint (in Point),
  SecondPoint (in Point),
}

struct InExpression {
  InKeyword (16) "in",
  IdentifierOrModuleId (in IdentifierOrModuleId)
}

enum IdentifierOrModuleId {
  Identifier (in Identifier),
  ModuleIdAndTurboFish (in ModuleIdAndTurboFish)
}

struct ModuleIdAndTurboFish {
  ModuleId (in ModuleId),
  TurboFish (in TurboFish),
  IdentifierOrModuleId (in IdentifierOrModuleId),
}
